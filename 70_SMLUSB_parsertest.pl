#!/bin/perl
use strict;
use warnings;


# New parser for 70_SMLUSB to be more flexible and intelligent
# Ready to be implemented into 70_SMLUSB
# ToDo:
# 
# 1. statusword parsing sucks. Find a good description to identify all informations (binary) out of the statusword.
#
# 2. same for unit and scaler!
#
# 3. Implement CRC16 check (for whole file and telegram/message)

my %obiscodes = (
 '77070100010800FF' => 'Zählerstand Bezug Total      ',
 '77070100020800FF' => 'Zählerstand Lieferung Total  ',
 '77070100010801FF' => 'Zählerstand Tarif 1 Bezug    ',
 '77070100020801FF' => 'Zählerstand Tarif 1 Lieferung',
 '77070100010802FF' => 'Zählerstand Tarif 2 Bezug    ',
 '77070100020802FF' => 'Zählerstand Tarif 2 Lieferung',
 '770701000F0700FF' => 'Momentanleistung',
 '77070100100700FF' => 'Momentanleistung',
 '77070100010700FF' => 'Momentanleistung Bezug - Voller');

my $smlfile;

#EHZ363WA
#$smlfile

# ED300L
#$smlfile

# ED300l Bezug
#my $smlfile

# Irgendwas
#$smlfile

# Irgendwas anderes
#$smlfile

#Q3 von voller
#$smlfile

#Hager EHZ363Z5 von zYloriC
#$smlfile

#ED300S von Blackstone
$smlfile

#1B1B1B1B01010101760900000000055BC41F6201620072630101760101090000000001C941610B06484147010754DED5CF0101631E1F00760900000000055BC420620162007263070177010B06484147010754DED5CF070100620AFFFF7262016502981D9B7A77078181C78203FF01010101044841470177070100000009FF010101010B06484147010754DED5CF0177070100010800FF628201621E52FF5502AB1B8A0177070100010801FF0101621E52FF5502AAF47A0177070100010802FF0101621E52FF5327100177070100020800FF628201621E52FF55031FEB190177070100020801FF0101621E52FF55031F";


# Inputvalue is $smlfile. This part checks if the SML header and footer are available and complete

if ($smlfile =~ m/1B1B1B1B1A[0-9A-F]{6}$/) {
  if ($smlfile =~ m/^1B1B1B1B01010101/) {
    print "Header - OK\n"; } 
  else {
    if ($smlfile =~ m/^(1B){0,4}01010101/) {
      $smlfile =~ s/^(1B){0,4}01010101/1B1B1B1B01010101/g;
      print "Header - Repaired\n";} 
    else {
      print "Header - No header found!\n";}
  }} 
else {
  print "Footer - No footer found\n";
}
 
my $telegramm;
my $scaler;
my $typelength;
my $unit;
my $direction;

my $length_all = 0;
my $length_value = 0;


# Try to find a SML telegramm in the SML file

  while ($smlfile =~ m/7707[0-9A-F]{10}FF[0-9A-F]{16,9999}/) {
    $telegramm = $&;

    # Try to find the OBIS code in the hash of known and supported OBIS codes
    # OBIS Code with the start (7707) is always 8 bit long (16 nible)
 
    if (defined $obiscodes{substr($telegramm,0,16)}) {
    
      # OBIS code found start parsing
    
      $length_all   = 16;    
      $length_value = 0;

      print "USB: SML Telegram found: " . substr($telegramm,0,16) . "\n";

      # Detect length of status word (very static at the moment)
      # You can find more information if you google for type length field
      # 01 = Statusword not set
      # 62 is (6 = no more tl fields and type = unsigned?, 2 = 2 bytes or 4 hex chars)
       
      $length_all+=hexstr_to_signed32int(substr($telegramm,17,1))*2+2;
        
      # Detect the direction of engergy from the status word
      my $direction = "Nothing"; 
      $direction = "Bezug"       if (substr($telegramm,$length_all-4,2) eq "82");
      $direction = "Einspeisung" if (substr($telegramm,$length_all-4,2) eq "A2");
	
      print "valTime = " . substr($telegramm,$length_all-2,2) . "\n";

      $length_all+=14		 if (substr($telegramm,$length_all-2,2) eq "72");

      # Detect the unit. Also very static and could be improved

		  if (substr($telegramm,$length_all,4) eq "621E") {
			$unit = "W/h"; }
		  else {
			$unit = "W"; }

      $length_all+=4;

      # Detect the scaler. Also very static and could be improved

      $scaler=10 if (substr($telegramm,$length_all,4) eq "52FF"); 
      $scaler=1  if (substr($telegramm,$length_all,4) eq "5200");
      $scaler=1  if (substr($telegramm,$length_all,4) eq "5201");
      $length_all+=4;

      # Detect the value length.

      $length_value=hexstr_to_signed32int(substr($telegramm,$length_all+1,1))*2;
      $length_all+=2;   
   
      # If value is bigger than 9999 W/h change to kW/h 

		if (sprintf("%.2f",hexstr_to_signed32int(substr($telegramm,$length_all,$length_value-2))/$scaler) > 9999) { 
			$scaler = 10000; 
			$unit = "kW/h"; 
			print "Bigger\n"; }

      # Output of results only if a meaningful value is found. Otherwise nothing happens.

		if (sprintf("%.2f",hexstr_to_signed32int(substr($telegramm,$length_all,$length_value-2))/$scaler) > 0) {
			#Log3 $hash, 5, "SMLUSB: Reading BulkUpdate. Value > 0";
			
			if ((substr($telegramm,0,16) eq "770701000F0700FF") || (substr($telegramm,0,16) eq "77070100100700FF")) {
				#Log3 $hash, 5, "SMLUSB: Setting state";
				print "$unit: " . sprintf("%.2f",hexstr_to_signed32int(substr($telegramm,$length_all,$length_value-2))/$scaler) . " - $direction\n";
					if ($direction eq "Einspeisung") {
						print $obiscodes{substr($telegramm,0,16)}; 
						print sprintf("%.2f",hexstr_to_signed32int(substr($telegramm,$length_all,$length_value-2))/$scaler*-1)."\n";
					}
					else {
						print $obiscodes{substr($telegramm,0,16)}; 
						print sprintf("%.2f",hexstr_to_signed32int(substr($telegramm,$length_all,$length_value-2))/$scaler)."\n";
					}
			}
			else {
				print $obiscodes{substr($telegramm,0,16)}; 
				print sprintf("%.2f",hexstr_to_signed32int(substr($telegramm,$length_all,$length_value-2))/$scaler)."\n";
			}
		}
		 print "RAW : " . substr($telegramm,$length_all,$length_value-2) . "\n";
	}	
    else {
      # If no known OBIS code can be found the telegramm will be ignored (or logged)
      # print "No Obis Code found!: " . substr($telegramm,0,16) ."\n"; 
      # The telegramm  header needs at least to be removed from the smlfile to detect the next one.
      $length_all=16; 
    }
 
    # Remove found telegram from remaining sml file.
	#print $smlfile;
	#print "Diagnose: ";
	#print " Length all: $length_all";
	#print " Length value: $length_value";
	#print " Length smlfile: ";
	#print length($smlfile)."\n";
	
    $smlfile = substr($smlfile,index($smlfile,$&)+$length_all+$length_value,length($smlfile));
  }

  # No good crc16 function found or developed yet. This is a todo
  #my $crc = substr($smlfile,length($smlfile)-4,4);
  #print "CRC: $crc - \n";

  #Log3 $hash, 5, "SMLUSB: Parsing ended";

  #readingsEndUpdate($hash, 1); 

  #return undef;


#####################################
sub hexstr_to_signed32int {
    my ($hexstr) = @_;
    return 0  
      if $hexstr !~ /^[0-9A-Fa-f]{1,35}$/;
    my $num = hex($hexstr);
    return $num >> 31 ? $num - 2 ** 32 : $num;
}
